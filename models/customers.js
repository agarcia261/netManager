const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const CustomerSchema = new Schema({
    customerName:{
        type:String,
        required:true,
        unique:true

    },
    routers:[{
        routerName:{
            type:String,
            required:true
        },
        port:{
            type:String,
            required:true
        },
        portUp:{
            type:Boolean,
            default:false
        },
        portRxdBm:{
            type:Number,
            default:-6
        },
        portTxdBm:{
            type:Number,
            default:-3
        },
        ipxAccess:{
            type:Number,
            require:true
        },
        ipxAccessCSS:{
            type:String,
            default:""
        },        
        services:[{
            sap:{
                type:String,
                default:""
            },
            codification:{
                type:Number,
                default:0
            },
            serviceType:{
                type:String,
                default:""
            },
            serviceID:{
                type:Number,
                default:0
            },
            serviceAdminStatus:{
                type:String,
                default:""
            },
            serviceOperationalStatus:{
                type:String,
                default:""
            },
            sapStatusCSS:{
                type:String,
                default:""
            },
            arp:{
                source:{
                    ipAddress:{
                        type:String,
                        default:""
                    },
                    macAddress:{
                        type:String,
                        default:""
                    },
                    expires:{
                        type:String,
                        default:""
                    },
                    type:{
                        type:String,
                        default:""
                    },
                    interface:{
                        type:String,
                        default:""
                    }
                },
                destination:{
                    arpStatus:{
                        type:Boolean,
                        default:false
                    },
                    ipAddress:{
                        type:String,
                        default:""
                    },
                    macAddress:{
                        type:String,
                        default:""
                    },
                    expires:{
                        type:String,
                        default:""
                    },
                    type:{
                        type:String,
                        default:""
                    },
                    interface:{
                        type:String,
                        default:""
                    },
                    arpStatusCSS:{
                        type:String,
                        default:""
                    }
                },
            },
            bgp:{
                peerASN:{
                    type:Number,
                    default:0
                },
                pktRcvd:{
                    type:Number,
                    default:0
                },
                summary:{
                    type:String,
                    default:""
                },
                familyAddr:{
                    type:String,
                    default:""
                },
                bgpRoutes:{
                    received:{
                        type:String,
                        default:""
                    },
                    active:{
                        type:String,
                        default:""
                    },
                    advertised:{
                        type:String,
                        default:""
                    }
                },
                bgpStatusCSS:{
                    type:String,
                    default:""
                }
            },
            avrTraffiOut:Number,
            avrTrafficIn:Number,
            mirrored:{
                type:Boolean,
                default:false
            }
        }]
    }],
    createdOn:{
        type:Date,
        default:Date.now
    },
    lastUpdatedOn:{
        type:Date,
        default:Date.now
    }

});

//Creating the model from the schema above
const Customers = mongoose.model('customers', CustomerSchema)
//export the Mirror Model
module.exports = Customers