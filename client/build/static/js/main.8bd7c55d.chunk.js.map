{"version":3,"sources":["components/Tables/index.js","components/pages/Mirror/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Tables","props","react_default","a","createElement","className","class","mirrorArr","map","mirror","key","_id","router","sap","moment","createdOn","format","expiration","fromNow","onClick","deleteMirror","type","name","Mirror","state","handleDateTimePicker","_this","setState","Object","defineProperty","toDate","handleInputChange","event","_event$target","target","value","loadMirrors","axios","get","then","res","data","catch","err","console","log","id","delete","json","handleFormSubmit","preventDefault","post","newMirror","valid","current","isAfter","DateTime","subtract","this","_this2","onSubmit","placeholder","onChange","htmlFor","DateTime_default","isValidDate","inputProps","readOnly","length","components_Tables","Component","App","BrowserRouter","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8bd7c55d.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from 'moment';\nimport \"./style.css\";\n\n\nfunction Tables(props) {\n  return (\n    <div className=\"row\">\n    <h3 className=\"title\">Current Mirror(s)</h3>\n    \n      <table class=\"highlight responsive-table\">\n      <thead>\n        <tr>\n          <th>Router</th>\n          <th>Sap or IP Filter</th>\n          <th>Created on</th>\n          <th>Expiration</th>\n          <th>Time Left</th> \n          <th> </th> \n          </tr>\n          </thead>\n          <tbody>\n          {props.mirrorArr.map(mirror => {\n            // console.log(mirror);\n            return (\n            <tr key={mirror._id}>\n              <td>{mirror.router}</td>\n              <td>{mirror.sap}</td>\n              <td>{moment(mirror.createdOn).format('LLLL')}</td>\n              <td>{moment(mirror.expiration).format('LLLL')} </td>\n              <td>{moment(mirror.expiration).fromNow()}</td> \n              <td>\n                <button className=\"btn-floating  waves-light right grey\"\n                onClick={() => props.deleteMirror(mirror._id)} type=\"submit\" name=\"action\">\n                <i className=\"material-icons \">delete</i>\n                </button>\n              </td> \n            </tr>\n          \n        );\n\n      })}\n      </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Tables;\n\n\n//btn-large\n//waves-effect ","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport DateTime from \"react-datetime\";\nimport Tables from \"../../../components/Tables\";\nimport \"./style.css\";\n\n\n\nclass Mirror extends Component {\n  // Setting the initial values for miror information\n  state = {\n    router: \"\",\n    sap: \"\",\n    expiration: \"\",\n    mirrorArr: []\n  };\n\n  handleDateTimePicker = (moment, name) =>\n    this.setState({ [name]: moment.toDate() });\n\n  // handle any changes to the input fields\n  handleInputChange = event => {\n    // Pull the name and value properties off of the event.target (the element which triggered the event)\n    const { name, value } = event.target;\n    // console.log(event.target);\n\n    // Set the state for the appropriate input field\n    this.setState({\n      [name]: value\n    });\n  };\n\n  loadMirrors = () => {\n    axios\n    .get(\"/api/mirror\")\n    .then(res => this.setState({ mirrorArr: res.data }))\n    .catch(err => console.log(err));\n  };\n\n  componentDidMount() {\n    this.loadMirrors();\n  }\n\n  componentDidUpdate(){\n    this.loadMirrors();\n  }\n  \n  deleteMirror = id => {\n    axios\n      .delete(\"/api/mirror/\" + id)\n      .then(json => this.setState({ mirrorArr: json.data }))\n      .catch(err => console.log(err));\n  };\n\n\n  // When the form is submitted, prevent the default event and alert the username and password\n  handleFormSubmit = event => {\n    event.preventDefault();\n    // this will be posted within a route the function is not being called\n    const data = {\n      router: this.state.router,\n      sap: this.state.sap,\n      expiration: this.state.expiration\n    };\n    console.log(data);\n    return (\n      axios\n        .post(\"/api/mirror\", data)\n        //create post request to post data so that addMirror has access to it\n        .then(res => this.setState({ newMirror: res.data }))\n        .catch(err => console.log(err))\n        .then(\n          this.setState({\n            router: \"\",\n            sap: \"\",\n            expiration: \"\"\n          })\n        )\n    );\n  };\n\n\n  //DateTime not available for past dates\n  valid = current => {\n    return current.isAfter(DateTime.moment().subtract(1, \"day\"));\n  };\n\n  //render form and existing miror information\n  render() {\n    return (\n      <div className=\"row content-container\">\n      <h3 className=\"title\">Add A New Mirror</h3>\n        <form\n          className=\"col s12 form-class\"\n          id=\"add-mirror\"\n          onSubmit={this.handleFormSubmit}\n        >\n          <div className=\"row\">\n            <div className=\"input-field col s12m m3\">\n              <input\n                placeholder=\"\"\n                id=\"router-input\"\n                type=\"text\"\n                name=\"router\"\n                // className=\"autocomplete\"\n                value={this.state.router}\n                onChange={this.handleInputChange}\n              />\n              <label htmlFor=\"router\">Router</label>\n            </div>\n\n            <div className=\"input-field col s12 m3\">\n              <input\n                placeholder=\" \"\n                id=\"mirror-sap\"\n                type=\"text\"\n                name=\"sap\"\n                //className=\"validate\"\n                value={this.state.sap}\n                onChange={this.handleInputChange}\n              />\n              <label htmlFor=\"sap\">Sap or IP-Filter</label>\n            </div>\n\n            <div className=\"input col s12 m3\">\n              <label className=\"dateTimeLabel\" htmlFor=\"expiration\">\n                Expiration\n              </label>\n              <DateTime \n                onChange={moment =>\n                  this.handleDateTimePicker(moment, \"expiration\")\n                }\n                value={this.state.expiration}\n                isValidDate={this.valid}\n                inputProps={{readOnly:false}}\n              />\n              \n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"btn-floating btn-large scale-transition\"\n            >\n              <i className=\"material-icons\">add</i>\n            </button>\n          </div>\n        </form>\n        {/* <h3 className=\"title\">Current Mirror(s)</h3> */}\n          <div>\n          \n          {this.state.mirrorArr.length ? (\n          <Tables\n            mirrorArr={this.state.mirrorArr}\n            deleteMirror={this.deleteMirror}\n          />\n        ) : (\n          <h3>No Current Mirrors</h3>\n        )} \n\n          </div>\n        \n \n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default Mirror;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import Nav from \"./components/Nav\";\nimport Mirror from \"./components/pages/Mirror\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          \n          {/* <Route exact path=\"/\" component={Search} /> */}\n          <Route exact path=\"/mirror\" component={Mirror} />\n        </div>\n      </Router>   \n    );\n  }\n}\n\nexport default App;\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}